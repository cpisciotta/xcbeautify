import Foundation

class Regex {
    let pattern: String

    private lazy var regex: NSRegularExpression? = {
        return try? NSRegularExpression(pattern: "^" + pattern, options: [.caseInsensitive])
    }()

    fileprivate init(pattern: String) {
        self.pattern = pattern
    }

    func match(string: String) -> Bool {
        let fullRange = NSRange(string.startIndex..., in: string)
        return regex?.rangeOfFirstMatch(in: string, range: fullRange).location != NSNotFound
    }
}

extension Regex {
    static let aggregateTarget = Regex(pattern: AggregateTargetCaptureGroup.pattern)
    static let analyze = Regex(pattern: AnalyzeCaptureGroup.pattern)
    static let analyzeTarget = Regex(pattern: AnalyzeTargetCaptureGroup.pattern)
    static let buildTarget = Regex(pattern: BuildTargetCaptureGroup.pattern)
    static let checkDependenciesErrors = Regex(pattern: CheckDependenciesErrorsCaptureGroup.pattern)
    static let checkDependencies = Regex(pattern: CheckDependenciesCaptureGroup.pattern)
    static let clangError = Regex(pattern: ClangErrorCaptureGroup.pattern)
    static let cleanRemove = Regex(pattern: CleanRemoveCaptureGroup.pattern)
    static let cleanTarget = Regex(pattern: CleanTargetCaptureGroup.pattern)
    static let codesignFramework = Regex(pattern: CodesignFrameworkCaptureGroup.pattern)
    static let codesign = Regex(pattern: CodesignCaptureGroup.pattern)
    static let compileCommand = Regex(pattern: CompileCommandCaptureGroup.pattern)
    static let compileError = Regex(pattern: CompileErrorCaptureGroup.pattern)
    static let compile = Regex(pattern: CompileCaptureGroup.pattern)
    static let compileStoryboard = Regex(pattern: CompileStoryboardCaptureGroup.pattern)
    static let compileWarning = Regex(pattern: CompileWarningCaptureGroup.pattern)
    static let compileXib = Regex(pattern: CompileXibCaptureGroup.pattern)
    static let copyHeader = Regex(pattern: CopyHeaderCaptureGroup.pattern)
    static let copyPlist = Regex(pattern: CopyPlistCaptureGroup.pattern)
    static let copyStrings = Regex(pattern: CopyStringsCaptureGroup.pattern)
    static let cpresource = Regex(pattern: CpresourceCaptureGroup.pattern)
    static let cursor = Regex(pattern: CursorCaptureGroup.pattern)
    static let duplicateLocalizedStringKey = Regex(pattern: DuplicateLocalizedStringKeyCaptureGroup.pattern)
    static let executedWithoutSkipped = Regex(pattern: ExecutedWithoutSkippedCaptureGroup.pattern)
    static let executedWithSkipped = Regex(pattern: ExecutedWithSkippedCaptureGroup.pattern)
    static let failingTest = Regex(pattern: FailingTestCaptureGroup.pattern)
    static let fatalError = Regex(pattern: FatalErrorCaptureGroup.pattern)
    static let fileMissingError = Regex(pattern: FileMissingErrorCaptureGroup.pattern)
    static let generateCoverageData = Regex(pattern: GenerateCoverageDataCaptureGroup.pattern)
    static let generatedCoverageReport = Regex(pattern: GeneratedCoverageReportCaptureGroup.pattern)
    static let generateDsym = Regex(pattern: GenerateDSYMCaptureGroup.pattern)
    static let genericWarning = Regex(pattern: GenericWarningCaptureGroup.pattern)
    static let ldError = Regex(pattern: LDErrorCaptureGroup.pattern)
    static let ldWarning = Regex(pattern: LDWarningCaptureGroup.pattern)
    static let libtool = Regex(pattern: LibtoolCaptureGroup.pattern)
    static let linkerDuplicateSymbolsLocation = Regex(pattern: LinkerDuplicateSymbolsLocationCaptureGroup.pattern)
    static let linkerDuplicateSymbols = Regex(pattern: LinkerDuplicateSymbolsCaptureGroup.pattern)
    static let linkerUndefinedSymbolLocation = Regex(pattern: LinkerUndefinedSymbolLocationCaptureGroup.pattern)
    static let linkerUndefinedSymbols = Regex(pattern: LinkerUndefinedSymbolsCaptureGroup.pattern)
    static let linking = Regex(pattern: LinkingCaptureGroup.pattern)
    static let moduleIncludesError = Regex(pattern: ModuleIncludesErrorCaptureGroup.pattern)
    static let noCertificate = Regex(pattern: NoCertificateCaptureGroup.pattern)
    static let packageFetching = Regex(pattern: PackageFetchingCaptureGroup.pattern)
    static let packageUpdating = Regex(pattern: PackageUpdatingCaptureGroup.pattern)
    static let packageCheckingOut = Regex(pattern: PackageCheckingOutCaptureGroup.pattern)
    static let packageGraphResolvingStart = Regex(pattern: PackageGraphResolvingStartCaptureGroup.pattern)
    static let packageGraphResolvingEnded = Regex(pattern: PackageGraphResolvingEndedCaptureGroup.pattern)
    static let packageGraphResolvedItem = Regex(pattern: PackageGraphResolvedItemCaptureGroup.pattern)
    static let parallelTestCaseFailed = Regex(pattern: ParallelTestCaseFailedCaptureGroup.pattern)
    static let parallelTestCasePassed = Regex(pattern: ParallelTestCasePassedCaptureGroup.pattern)
    static let parallelTestCaseAppKitPassed = Regex(pattern: ParallelTestCaseAppKitPassedCaptureGroup.pattern)
    static let parallelTestingStarted = Regex(pattern: ParallelTestingStartedCaptureGroup.pattern)
    static let parallelTestingPassed = Regex(pattern: ParallelTestingPassedCaptureGroup.pattern)
    static let parallelTestingFailed = Regex(pattern: ParallelTestingFailedCaptureGroup.pattern)
    static let parallelTestSuiteStarted = Regex(pattern: ParallelTestSuiteStartedCaptureGroup.pattern)
    static let pbxcp = Regex(pattern: PbxcpCaptureGroup.pattern)
    static let phaseScriptExecution = Regex(pattern: PhaseScriptExecutionCaptureGroup.pattern)
    static let phaseSuccess = Regex(pattern: PhaseSuccessCaptureGroup.pattern)
    static let podsError = Regex(pattern: PodsErrorCaptureGroup.pattern)
    static let preprocess = Regex(pattern: PreprocessCaptureGroup.pattern)
    static let processInfoPlist = Regex(pattern: ProcessInfoPlistCaptureGroup.pattern)
    static let processPchCommand = Regex(pattern: ProcessPchCommandCaptureGroup.pattern)
    static let processPch = Regex(pattern: ProcessPchCaptureGroup.pattern)
    static let provisioningProfileRequired = Regex(pattern: ProvisioningProfileRequiredCaptureGroup.pattern)
    static let restartingTest = Regex(pattern: RestartingTestCaptureGroup.pattern)
    static let shellCommand = Regex(pattern: ShellCommandCaptureGroup.pattern)
    static let symbolReferencedFrom = Regex(pattern: SymbolReferencedFromCaptureGroup.pattern)
    static let testCaseMeasured = Regex(pattern: TestCaseMeasuredCaptureGroup.pattern)
    static let testCasePassed = Regex(pattern: TestCasePassedCaptureGroup.pattern)
    static let testCasePending = Regex(pattern: TestCasePendingCaptureGroup.pattern)
    static let testCaseStarted = Regex(pattern: TestCaseStartedCaptureGroup.pattern)
    static let testSuiteStart = Regex(pattern: TestSuiteStartCaptureGroup.pattern)
    static let testSuiteStarted = Regex(pattern: TestSuiteStartedCaptureGroup.pattern)
    static let testSuiteAllTestsPassed = Regex(pattern: TestSuiteAllTestsPassedCaptureGroup.pattern)
    static let testSuiteAllTestsFailed = Regex(pattern: TestSuiteAllTestsFailedCaptureGroup.pattern)
    static let testsRunCompletion = Regex(pattern: TestsRunCompletionCaptureGroup.pattern)
    static let tiffutil = Regex(pattern: TIFFutilCaptureGroup.pattern)
    static let touch = Regex(pattern: TouchCaptureGroup.pattern)
    static let uiFailingTest = Regex(pattern: UIFailingTestCaptureGroup.pattern)
    static let undefinedSymbolLocation = Regex(pattern: UndefinedSymbolLocationCaptureGroup.pattern)
    static let willNotBeCodeSigned = Regex(pattern: WillNotBeCodeSignedCaptureGroup.pattern)
    static let writeAuxiliaryFiles = Regex(pattern: WriteAuxiliaryFilesCaptureGroup.pattern)
    static let writeFile = Regex(pattern: WriteFileCaptureGroup.pattern)
    static let xcodebuildError = Regex(pattern: XcodebuildErrorCaptureGroup.pattern)
}
